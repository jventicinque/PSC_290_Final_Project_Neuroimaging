#Load Packages
from nilearn import datasets
from nilearn import input_data
from nilearn import plotting
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from nilearn.connectome import ConnectivityMeasure


#load in the haxby dataset from Nilearn
#This is a block-design fMRI dataset of 6 subjects with 12 runs per subject in which they viewed a series of objects and faces.

haxby_dataset = datasets.fetch_haxby()

#Check the data. Making sure that a bunch of Nifti files loaded in
print(type(haxby_dataset))
print(haxby_dataset)

Extract time series, functional networks with dictionary learning

##Build and display correlation matrix
#Construct the correlation matrix from the time series data
correlation_measure = ConnectivityMeasure(kind='correlation')
correlation_matrix = correlation_measure.fit_transform([time_series])[0]

#Plot the correlation matrix
# Remove the diagonal for visualization puposes
np.fill_diagonal(correlation_matrix, 0)
#Create the plot
plotting.plot_matrix(correlation_matrix, figure=(10, 8), labels=labels[1:],
                     vmax=0.8, vmin=-0.8, reorder=True)

Display corresponding graph
3D visualization
Use of parameters such as `display_mode` and `cut_coords` with plotting function: func:`nilearn.plotting.plot_stat_map`
Show how to use various features such as `add_edges`, `add_contours`, `add_markers` in visualizing regions of interest images
Mask images overlaying on subject specific anatomical/EPI image
Show how to visualize the retrieved dataset using plotting tools from nilearn
Demonstrate various display features using nilearn where each specific feature will be helpful in projecting brain imaging results for further interpretation
Import nilearn image processing tool for basic processing of functional brain image
Compute voxel-wise mean functional image across time dimension
